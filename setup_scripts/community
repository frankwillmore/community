#!/usr/bin/env bash 

cmd_help() 
{
    printf "community [ subcommand ] [ args ]\n"
    printf "where subcommand in { create, delete, archive }\n" 
    printf "and args is the name of the community.\n" 
    printf "To specify a differenet community location, set COMMUNITY_ROOT"
    printf "(Default value is COMMUNITY_ROOT=/tmp/community)"
    printf "For deubgging info, set COMMUNITY_SCRIPT_DEBUG=y."
    printf "\n\n"
}

# COMMUNITY_ROOT=/soft/community
: ${COMMUNITY_SCRIPT_DEBUG:="y"}
: ${COMMUNITY_ROOT:="/tmp/community"}
COMMUNITY_PROJECT_DIR=${COMMUNITY_ROOT}/projects
COMMUNITY_PROJECT_MODULE_DIR=${COMMUNITY_ROOT}/modulefiles

cmd_create() 
{
    # PROJECT_DESCRIPTION, PROJECT_NAME, PROJECT_CONTACT, and PROJECT_ROOT are all 
    # tokens in the module template to be replaced. PROJECT_NAME is the 1st arg. 

    PROJECT_NAME=$1
    PROJECT_ROOT="${COMMUNITY_PROJECT_DIR}/${PROJECT_NAME}"
    MODULE_ROOT="${COMMUNITY_PROJECT_MODULE_DIR}/${PROJECT_NAME}"
    
    echo "creating community in ${PROJECT_ROOT} for project ${PROJECT_NAME}:"
    echo
    echo "creating software directory ${PROJECT_ROOT}"
    mkdir -p ${PROJECT_ROOT}
    echo "creating module directory ${MODULE_ROOT}"
    mkdir -p ${MODULE_ROOT}
    echo "adding template module file ${MODULE_ROOT}/${PROJECT_NAME}"
    cp ${COMMUNITY_ROOT}/module_templates/module_template.tcl ${MODULE_ROOT}/${PROJECT_NAME}
    read -p "PROJECT_DESCRIPTION: " PROJECT_DESCRIPTION
    echo "Replacing module template tokens with project info"
    sed -ie "s/\[\[PROJECT_NAME\]\]/${PROJECT_NAME}/g"
    echo $PROJECT_NAME
    sed -ie "s/\[\[PROJECT_DESCRIPTION\]\]/${PROJECT_DESCRIPTION}/g"
    echo $PROJECT_DESCRIPTION

    echo "making project dirs:"
    mkdir -p ${PROJECT_ROOT}/bin
    mkdir -p ${PROJECT_ROOT}/share/man
    mkdir -p ${PROJECT_ROOT}/lib64
    mkdir -p ${PROJECT_ROOT}/lib64/pkgconfig

}

cmd_delete() 
{
    echo "delete $1"
}

cmd_archive() 
{
    echo "archiving $1"
    reap -p "change user ownership of ${COMMUNITY_PROJECT_DIR}/${PROJECT_NAME} to community?" concur
    if [ $concur = "y" ] || [ $concur = "yes" ] 
    then
        # chown -R community ${COMMUNITY_PROJECT_DIR}/${PROJECT_NAME} 
        echo "chown -R community ${COMMUNITY_PROJECT_DIR}/${PROJECT_NAME} "
    else
        echo "declining to update."
    fi
}

cmd_quit()
{
    echo $1
    exit
}

#[ -z ${2+x} ] && PROJECT_NAME=$2

PROJECT_NAME="$2"
if [ -z ${PROJECT_NAME} ] 
then
    cmd_help
    cmd_quit "no project name specified."
else
    [ ${COMMUNITY_SCRIPT_DEBUG} = "y" ] && echo "got PROJECT_NAME=$PROJECT_NAME"
fi

#if [ $1 = "--help" ] || [ $1 = "-h" ] || [[ "$1" = "" ]]
if [ x$1 = x"--help" ] || [ x$1 = x"-h" ] || [ x$1 = "x" ]
then
    cmd_help
elif [ $1 = "create" ] 
then
    cmd_create ${PROJECT_NAME}
elif [ $1 = "delete" ] 
then
    cmd_delete ${PROJECT_NAME}
elif [ $1 = "archive" ] 
then
    cmd_archive ${PROJECT_NAME}
fi

